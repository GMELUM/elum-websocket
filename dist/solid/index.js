import { createEffect, createComponent, useContext, onMount, onCleanup, createContext } from 'solid-js';
import { createStore } from 'solid-js/store';
import { globalSignal, atom, setter } from 'elum-state/solid';

const WebSocket = (props) => {
  const [socket, setSocket] = createStore({
    context: props.context.defaultValue
  });
  createEffect(() => {
    setSocket("context", props.context.defaultValue);
  });
  return createComponent(props.context.Provider, {
    get value() {
      return socket.context;
    },
    get children() {
      return props.children;
    }
  });
};

const useWebSocket = (context) => useContext(context);

const useStatus = (context) => {
  const ctx = useContext(context);
  const state = globalSignal(ctx.status);
  return state[0];
};

const encodedJs = "";
          const decodeBase64 = (base64) => Uint8Array.from(atob(base64), c => c.charCodeAt(0));
          const blob = typeof window !== "undefined" && window.Blob && new Blob([decodeBase64(encodedJs)], { type: "text/javascript;charset=utf-8" });
          function WorkerWrapper(options) {
            let objURL;
            try {
              objURL = blob && (window.URL || window.webkitURL).createObjectURL(blob);
              if (!objURL) throw ''
              const worker = new Worker(objURL, {
        
        name: options?.name
      });
              worker.addEventListener("error", () => {
                (window.URL || window.webkitURL).revokeObjectURL(objURL);
              });
              return worker;
            } catch(e) {
              return new Worker(
                "data:text/javascript;base64," + encodedJs,
                {
        
        name: options?.name
      }
              );
            } finally {
                    objURL && (window.URL || window.webkitURL).revokeObjectURL(objURL);
                  }
          }

function connect() {
  this.client.postMessage([0, "connect", ""]);
}

function disconnect() {
  this.client.postMessage([0, "disconnect", ""]);
}

function terminate() {
  this.client.terminate();
}

function send(event, data, callback) {
  const ID = ++this.requestID;
  if (typeof callback === "function") {
    console.log("callback");
    this.callbackEmitter.set(ID, callback);
    this.client.postMessage(["send", [ID, event, data]]);
    return;
  }
  return new Promise((resolve) => {
    this.callbackEmitter.set(ID, resolve);
    this.client.postMessage(["send", [ID, event, data]]);
  });
}

function onEvents(callback) {
  onMount(() => this.callbackEvents.add(callback));
  onCleanup(() => this.callbackEvents.delete(callback));
}

function init({
  url = void 0,
  autoconnect = true,
  autoreconnect = true
}) {
  const context = {
    url,
    client: new WorkerWrapper(),
    requestID: 0,
    callbackEmitter: /* @__PURE__ */ new Map(),
    callbackEvents: /* @__PURE__ */ new Set()
  };
  const status = atom({
    key: "__elum_websocket_status",
    default: "disconnected"
  });
  context.client.onmessage = (e) => {
    const [requestId, event, value] = e.data;
    if (["disconnected", "connected", "connecting", "aborted"].includes(event)) {
      return setter(status, event);
    }
    for (const clb of context.callbackEvents) {
      clb({
        event,
        data: value
      });
    }
    const emmiter = context.callbackEmitter.get(requestId);
    if (emmiter) {
      emmiter(value);
    }
  };
  if (url && autoconnect) {
    context.client.postMessage(["init", url, 0]);
  }
  return createContext({
    status,
    connect: connect.bind(context),
    disconnect: disconnect.bind(context),
    terminate: terminate.bind(context),
    send: send.bind(context),
    onEvents: onEvents.bind(context)
  });
}

export { WebSocket, init, useStatus, useWebSocket };
